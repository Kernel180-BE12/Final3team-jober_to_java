name: Deploy to ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ap-northeast-2
      ACCOUNT_ID: "808605954528"
      ECR_REGISTRY: "808605954528.dkr.ecr.ap-northeast-2.amazonaws.com"
      ECR_REPOSITORY: "final_jober"
      IMAGE_TAG: "${{ github.sha }}"   # 커밋 SHA로도 태깅
      ECS_CLUSTER: "final_jober"
      ECS_SERVICE: "arn:aws:ecs:ap-northeast-2:808605954528:service/final_jober/app-service-amyzs0hv"
      CONTAINER_NAME: "app"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::808605954528:role/github_action_role
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify caller identity (STS)
        run: aws sts get-caller-identity

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build, tag, and push image
        run: |
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Render task definition (replace image)
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/taskdef.json
          container-name: ${{ env.CONTAINER_NAME }}            # app
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to ECS (register new revision and update service)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}                      # ARN 사용
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
