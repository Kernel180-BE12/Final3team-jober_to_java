name: CI/CD Spring Boot JAR to EC2

on:
  push:
    branches: ["main", "chore/github-actions-pipeline"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar,scripts/*"
          target: "/home/ubuntu/"

      # 준비(줄바꿈/권한/JAR 확인)
      - name: Prepare scripts on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sed -i 's/\r$//' /home/ubuntu/scripts/*.sh || true
            chmod +x /home/ubuntu/scripts/*.sh
            ls -al /home/ubuntu/target/*.jar

      # stop — 세션 끊겨도 통과
      - name: Stop application on EC2 (allow disconnect)
        uses: appleboy/ssh-action@v0.1.6
        continue-on-error: true
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            /home/ubuntu/scripts/stop.sh || true

      # restart — Secrets를 env로 넘기고 디버그 출력
      - name: Restart application on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            echo "== DEBUG ENV =="
            echo "JWT_SECRET len=${#JWT_SECRET}"
            echo "REFRESH_PEPPER len=${#REFRESH_PEPPER}"
            echo "DB_URL=$DB_URL"

            # (원한다면 아래 export는 생략 가능 - env로 이미 주입됨)
            export JWT_SECRET="${JWT_SECRET}"
            export REFRESH_PEPPER="${REFRESH_PEPPER}"
            export DB_URL="${DB_URL}"
            export DB_USER="${DB_USER}"
            export DB_PASS="${DB_PASS}"

            chmod +x /home/ubuntu/scripts/*.sh
            /home/ubuntu/scripts/stop.sh || true
            /home/ubuntu/scripts/start.sh
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_PEPPER: ${{ secrets.REFRESH_PEPPER }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}

      # health — 별도 세션에서 헬스체크
      - name: Health check on EC2 (dynamic port)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            # 1) 로그에서 포트 추출
            PORT="$(grep -oP 'Tomcat started on port\(s\): \K[0-9]+' /home/ubuntu/jober-app.log 2>/dev/null | tail -1 || true)"

            # 2) 리슨 소켓에서 포트 추출
            if [ -z "${PORT}" ]; then
              ADDR="$(sudo ss -ltnp | awk '/java/ && /LISTEN/ {print $4}' | tail -1 || true)"
              [ -n "${ADDR}" ] && PORT="${ADDR##*:}"
            fi

            # 3) 없으면 SERVER_PORT / 기본 8080
            [ -z "${PORT}" ] && PORT="${SERVER_PORT:-8080}"

            # 4) 호스트 결정
            HOST="127.0.0.1"
            ADDR_LINE="$(sudo ss -ltnp | awk '/java/ && /LISTEN/ {print $4}' | tail -1 || true)"
            if echo "${ADDR_LINE}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:'; then
              IP="${ADDR_LINE%:*}"
              [ "${IP}" != "0.0.0.0" ] && HOST="${IP}"
            fi

            echo "health: http://${HOST}:${PORT}/actuator/health"
            curl -fsS "http://${HOST}:${PORT}/actuator/health" || echo "health check failed"

            # 참고용 최근 로그
            tail -n 120 /home/ubuntu/jober-app.log || true
