name: CI/CD Spring Boot JAR to EC2

on:
  push:
    branches: ["main", "chore/github-actions-pipeline"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SERVER_PORT: ${{ vars.SERVER_PORT || '8080' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package

      - name: Upload test reports on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "target/*.jar,scripts/*"
          target: "/home/ubuntu/"

      - name: Prepare scripts on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sed -i 's/\r$//' /home/ubuntu/scripts/*.sh || true
            chmod +x /home/ubuntu/scripts/*.sh
            ls -al /home/ubuntu/target/*.jar

      - name: Stop application on EC2 (allow disconnect)
        uses: appleboy/ssh-action@v1.0.0
        continue-on-error: true
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            /home/ubuntu/scripts/stop.sh || true

      - name: Start application on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'
            export REFRESH_PEPPER='${{ secrets.REFRESH_PEPPER }}'
            export DB_URL='${{ secrets.DB_URL }}'
            export DB_USER='${{ secrets.DB_USER }}'
            export DB_PASS='${{ secrets.DB_PASS }}'
            export OTP_PEPPER='${{ secrets.OTP_PEPPER }}'
            export VERIFY_BASE_URL='${{ vars.VERIFY_BASE_URL }}'
            export AI_BASE_URL='${{ vars.AI_BASE_URL }}'
            export CORS_ALLOWED_ORIGINS='${{ vars.CORS_ALLOWED_ORIGINS }}'
            export APP_COOKIE_SAMESITE='${{ vars.APP_COOKIE_SAMESITE }}'
            export APP_COOKIE_SECURE='${{ vars.APP_COOKIE_SECURE }}'
            export APP_COOKIE_MAX_AGE='${{ vars.APP_COOKIE_MAX_AGE }}'
            export APP_COOKIE_PATH='${{ vars.APP_COOKIE_PATH }}'
            export CSRF_ENABLED='${{ vars.CSRF_ENABLED }}'
            export SERVER_PORT='${{ env.SERVER_PORT }}'
            
            /home/ubuntu/scripts/start.sh

      - name: Health check on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PORT='${{ env.SERVER_PORT }}'
            HOST="127.0.0.1"
            
            echo "Health check: http://${HOST}:${PORT}/actuator/health"

            for i in {1..6}; do
              if curl -fsS "http://${HOST}:${PORT}/actuator/health"; then
                echo "Health check successful!"
                tail -n 50 /home/ubuntu/jober-app.log || true
                exit 0
              fi
              echo "Health check attempt $i failed. Retrying in 10 seconds..."
              sleep 10
            done

            echo "Health check failed after multiple attempts."
            tail -n 120 /home/ubuntu/jober-app.log || true
            exit 1

  notify-to-slack:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine deployment status
        id: status
        run: |
          if [[ '${{ needs.build-and-deploy.result }}' == 'success' ]]; then
            echo "SLACK_COLOR=good" >> $GITHUB_ENV
            echo "SLACK_ICON=:white_check_mark:" >> $GITHUB_ENV
            echo "SLACK_TITLE=배포 성공" >> $GITHUB_ENV
          else
            echo "SLACK_COLOR=danger" >> $GITHUB_ENV
            echo "SLACK_ICON=:x:" >> $GITHUB_ENV
            echo "SLACK_TITLE=배포 실패" >> $GITHUB_ENV
          fi

      - name: Get commit information
        id: commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV

      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ env.SLACK_COLOR }}
          SLACK_ICON: ${{ env.SLACK_ICON }}
          SLACK_TITLE: ${{ env.SLACK_TITLE }}
          SLACK_MESSAGE: |
            *Repository*: ${{ github.repository }}
            *Commit*: `${{ env.COMMIT_MSG }}`
            *Triggered by*: `${{ github.actor }}`
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here to view the workflow run>
